[{"authors":["admin"],"categories":null,"content":"Unary Computing is an emerging computing paradigm that manipulates bitstreams for calculation. It employs extremely simple computing logic, and provides tremendous power advantage over binary computing.\n","date":1610064000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1610064000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://unarycomputing.github.io/author/unary-computing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/unary-computing/","section":"authors","summary":"Unary Computing is an emerging computing paradigm that manipulates bitstreams for calculation. It employs extremely simple computing logic, and provides tremendous power advantage over binary computing.","tags":null,"title":"Unary Computing","type":"authors"},{"authors":["Unary Computing"],"categories":[],"content":"A brief introduction to the original ISCA'20 paper is here.\n","date":1610064000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1610064000,"objectID":"586f5a78832ff8d3334af3de788f0879","permalink":"https://unarycomputing.github.io/news/toppicks2021/","publishdate":"2021-01-08T00:00:00Z","relpermalink":"/news/toppicks2021/","section":"news","summary":"This paper introduces how to design unified GEMM with unary computing.","tags":["Unary Computing","GEMM","Open Source"],"title":"ISCA'20 paper is selected in IEEE Micro Top Picks 2021","type":"news"},{"authors":["Unary Computing"],"categories":[],"content":"This paper is titled \u0026ldquo;In-Stream Correlation-Based Division and Bit-Inserting Square Root in Stochastic Computing\u0026rdquo; in the IEEE Design \u0026amp; Test 2021 Special Issue on Stochastic Computing for Neuromorphic Architectures. And it is an extended version of the previous DAC'19 paper.\n","date":1609286400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609286400,"objectID":"3a732cf7cf5430854152d2438b6f3955","permalink":"https://unarycomputing.github.io/news/ieeedt-accepted/","publishdate":"2020-12-30T00:00:00Z","relpermalink":"/news/ieeedt-accepted/","section":"news","summary":"This paper introduces interesting tricks to perform division and square root for stochastic computing.","tags":["Stochastic Computing","Nonliearity"],"title":"Paper is accepted in IEEE Design \u0026 Test 2021","type":"news"},{"authors":["Unary Computing"],"categories":[],"content":"","date":1601942400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601942400,"objectID":"5bdfcb271b5792e805538f5cbebffb50","permalink":"https://unarycomputing.github.io/news/aspdac-accepted/","publishdate":"2020-10-06T00:00:00Z","relpermalink":"/news/aspdac-accepted/","section":"news","summary":"This paper introduces a metric to identify better SC units and predict the timing for early termination.","tags":["Stochastic Computing","Metric","Early Termination","Energy Efficiency"],"title":"Paper is accepted in ASP-DAC 2021","type":"news"},{"authors":["Unary Computing","Jingjie Li","Ruokai Yin","Hsuan Hsiao","Younghyun Kim","Joshua San Miguel"],"categories":null,"content":"","date":1590796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590796800,"objectID":"fb57225bb32d639f4dca0927261512e5","permalink":"https://unarycomputing.github.io/news/2020-05-30-isca/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/news/2020-05-30-isca/","section":"news","summary":"General matrix multiplication (GEMM) is universal in various applications, such as signal processing, machine learning, and computer vision. Conventional GEMM hardware architectures based on binary computing exhibit low area and energy efficiency as they scale due to the spatial nature of number representation and computing. Unary computing, on the other hand, can be performed with extremely simple processing units, often just with a single logic gate. But currently there exist no efficient architectures for unary GEMM. In this paper, we present uGEMM, an area- and energy-efficient unary GEMM architecture enabled by novel arithmetic units. The proposed design relaxes previously-imposed constraints on input bit streams—low correlation and long stream length—and achieves superior area and energy efficiency over existing unary systems. Furthermore, uGEMM’s output bit streams exhibit higher accuracy and faster convergence, enabling dynamic energy-accuracy scaling on resource-constrained systems.","tags":["Unary Computing","GEMM","Energy Efficiency","Architecture"],"title":"uGEMM: Unary Computing Architecture for GEMM Applications","type":"news"},{"authors":["Di Wu","Jingjie Li","Ruokai Yin","Hsuan Hsiao","Younghyun Kim","Joshua San Miguel"],"categories":null,"content":"","date":1590796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590796800,"objectID":"4cdeee35c026ea86d69417244524655f","permalink":"https://unarycomputing.github.io/publication/2020-05-30-isca/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2020-05-30-isca/","section":"publication","summary":"General matrix multiplication (GEMM) is universal in various applications, such as signal processing, machine learning, and computer vision. Conventional GEMM hardware architectures based on binary computing exhibit low area and energy efficiency as they scale due to the spatial nature of number representation and computing. Unary computing, on the other hand, can be performed with extremely simple processing units, often just with a single logic gate. But currently there exist no efficient architectures for unary GEMM. In this paper, we present uGEMM, an area- and energy-efficient unary GEMM architecture enabled by novel arithmetic units. The proposed design relaxes previously-imposed constraints on input bit streams—low correlation and long stream length—and achieves superior area and energy efficiency over existing unary systems. Furthermore, uGEMM’s output bit streams exhibit higher accuracy and faster convergence, enabling dynamic energy-accuracy scaling on resource-constrained systems.","tags":null,"title":"uGEMM: Unary Computing Architecture for GEMM Applications","type":"publication"},{"authors":["Di Wu","Jingjie Li","Ruokai Yin","Hsuan Hsiao","Younghyun Kim","Joshua San Miguel"],"categories":null,"content":"","date":1590796800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590796800,"objectID":"dd7a82055dc2e78a9f28530021d5eac9","permalink":"https://unarycomputing.github.io/resource/2020-05-30-isca/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/resource/2020-05-30-isca/","section":"resource","summary":"General matrix multiplication (GEMM) is universal in various applications, such as signal processing, machine learning, and computer vision. Conventional GEMM hardware architectures based on binary computing exhibit low area and energy efficiency as they scale due to the spatial nature of number representation and computing. Unary computing, on the other hand, can be performed with extremely simple processing units, often just with a single logic gate. But currently there exist no efficient architectures for unary GEMM. In this paper, we present uGEMM, an area- and energy-efficient unary GEMM architecture enabled by novel arithmetic units. The proposed design relaxes previously-imposed constraints on input bit streams—low correlation and long stream length—and achieves superior area and energy efficiency over existing unary systems. Furthermore, uGEMM’s output bit streams exhibit higher accuracy and faster convergence, enabling dynamic energy-accuracy scaling on resource-constrained systems.","tags":null,"title":"uGEMM: Unary Computing Architecture for GEMM Applications","type":"resource"},{"authors":null,"categories":null,"content":"Unary computing applies unary bit streams as internal data, and mitigates the conversion of data from unary to binary in converntional computers, leading to less system-level latency, as in the diagram. Currently, unary computing has already been applied to low-density parity-check code, image processing and machine learning. We create UnarySim to accurately simulate the behavior of unary computing at cycle level.\n","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559433600,"objectID":"eeed5179bec1bf19c22b15ae54e878d6","permalink":"https://unarycomputing.github.io/project/arch-fully-streaming/","publishdate":"2019-06-02T00:00:00Z","relpermalink":"/project/arch-fully-streaming/","section":"project","summary":"An emerging computing scheme based on unary bit streams.","tags":null,"title":"Fully Streaming Unary Architecture","type":"project"},{"authors":["Unary Computing","Joshua San Miguel"],"categories":null,"content":"","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559433600,"objectID":"64212172ae7fd11b1537723aeecd0f33","permalink":"https://unarycomputing.github.io/news/2019-06-02-dac/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/news/2019-06-02-dac/","section":"news","summary":"Stochastic Computing (SC) is designed to minimize hardware area and power consumption compared to traditional binary-encoded computation, stemming from the bit-serial data representation and extremely straightforward logic. Though existing Stochastic Computing Units mostly assume uncorrelated bit streams, recent works find that correlation can be exploited for higher accuracy. We propose novel architectures for SC division and square root, which leverage correlation via low-cost in-stream mechanisms that eliminate expensive bit stream regeneration. We also introduce new metrics to better evaluate SC circuits relying on equilibrium via feedback loops. Experiments indicate that our division converges 46.3% faster with both 43.3% lower error and 45.6% less area.","tags":["Unary Computing","Stochastic Computing","Energy Efficiency","Architecture","Division","Square Root","Nonlinearity"],"title":"In-Stream Stochastic Division and Square Root via Correlation","type":"news"},{"authors":["Di Wu","Joshua San Miguel"],"categories":null,"content":"","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559433600,"objectID":"145da9338e94805f131945eddce5db85","permalink":"https://unarycomputing.github.io/publication/2019-06-02-dac/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2019-06-02-dac/","section":"publication","summary":"Stochastic Computing (SC) is designed to minimize hardware area and power consumption compared to traditional binary-encoded computation, stemming from the bit-serial data representation and extremely straightforward logic. Though existing Stochastic Computing Units mostly assume uncorrelated bit streams, recent works find that correlation can be exploited for higher accuracy. We propose novel architectures for SC division and square root, which leverage correlation via low-cost in-stream mechanisms that eliminate expensive bit stream regeneration. We also introduce new metrics to better evaluate SC circuits relying on equilibrium via feedback loops. Experiments indicate that our division converges 46.3% faster with both 43.3% lower error and 45.6% less area.","tags":null,"title":"In-Stream Stochastic Division and Square Root via Correlation","type":"publication"},{"authors":["Di Wu","Joshua San Miguel"],"categories":null,"content":"","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559433600,"objectID":"73bd2cb7a5d5b471a6dea98664a744c6","permalink":"https://unarycomputing.github.io/resource/2019-06-02-dac/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/resource/2019-06-02-dac/","section":"resource","summary":"Stochastic Computing (SC) is designed to minimize hardware area and power consumption compared to traditional binary-encoded computation, stemming from the bit-serial data representation and extremely straightforward logic. Though existing Stochastic Computing Units mostly assume uncorrelated bit streams, recent works find that correlation can be exploited for higher accuracy. We propose novel architectures for SC division and square root, which leverage correlation via low-cost in-stream mechanisms that eliminate expensive bit stream regeneration. We also introduce new metrics to better evaluate SC circuits relying on equilibrium via feedback loops. Experiments indicate that our division converges 46.3% faster with both 43.3% lower error and 45.6% less area.","tags":null,"title":"In-Stream Stochastic Division and Square Root via Correlation","type":"resource"},{"authors":["Unary Computing"],"categories":[],"content":"","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"5bffb0b7501e8dba49ab6ae3aa0d5e2c","permalink":"https://unarycomputing.github.io/news/hello-world/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/news/hello-world/","section":"news","summary":"This is the very first post on my website!","tags":[],"title":"Hello World!","type":"news"},{"authors":null,"categories":null,"content":"Unary computing applies unary bit streams as internal data, and mitigates the conversion of data from unary to binary in converntional computers, leading to less system-level latency, as in the diagram. Currently, unary computing has already been applied to low-density parity-check code, image processing and machine learning. We create UnarySim to accurately simulate the behavior of unary computing at cycle level.\n","date":1530316800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530316800,"objectID":"659da43524d7fc8ccb1f60feaf721e2c","permalink":"https://unarycomputing.github.io/project/sim-function/","publishdate":"2018-06-30T00:00:00Z","relpermalink":"/project/sim-function/","section":"project","summary":"An emerging computing scheme based on unary bit streams.","tags":["Unary Computing","Architecture","Low Power","Energy Efficiency"],"title":"Function Simulation for Unary Computing","type":"project"},{"authors":null,"categories":null,"content":"Unary computing applies unary bit streams as internal data, and mitigates the conversion of data from unary to binary in converntional computers, leading to less system-level latency, as in the diagram. Currently, unary computing has already been applied to low-density parity-check code, image processing and machine learning. We create UnarySim to accurately simulate the behavior of unary computing at cycle level.\n","date":1530316800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530316800,"objectID":"bdb0d57edca505895dcc1664ca1cdba2","permalink":"https://unarycomputing.github.io/project/arch-hybrid-unary-binary/","publishdate":"2018-06-30T00:00:00Z","relpermalink":"/project/arch-hybrid-unary-binary/","section":"project","summary":"An emerging computing scheme based on unary bit streams.","tags":["Unary Computing","Architecture","Low Power","Energy Efficiency"],"title":"Hybrid Unary Binary Architecture","type":"project"},{"authors":null,"categories":null,"content":"Unary computing applies unary bit streams as internal data, and mitigates the conversion of data from unary to binary in converntional computers, leading to less system-level latency, as in the diagram. Currently, unary computing has already been applied to low-density parity-check code, image processing and machine learning. We create UnarySim to accurately simulate the behavior of unary computing at cycle level.\n","date":1530316800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530316800,"objectID":"4dfdf52f69bc3d47afd1d2e08c2f0737","permalink":"https://unarycomputing.github.io/project/sim-performance/","publishdate":"2018-06-30T00:00:00Z","relpermalink":"/project/sim-performance/","section":"project","summary":"An emerging computing scheme based on unary bit streams.","tags":["Unary Computing","Architecture","Low Power","Energy Efficiency"],"title":"Performance Simulation for Unary Computing","type":"project"}]